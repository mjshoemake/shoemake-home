//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2005.04.01 at 11:41:32 EST
//


package mjs.core.database.fielddef;



/**
 * This object contains factory methods for each Java content
 * interface and Java element interface generated in the
 * com.accenture.core.model.fielddef package. <p>
 *
 * An ObjectFactory allows you to programatically construct new
 * instances of the Java representation for XML content. The Java
 * representation of XML content can consist of schema derived
 * interfaces and classes representing the binding of schema type
 * definitions, element declarations and model groups. Factory methods
 * for each of these are provided in this class.
 */
public class ObjectFactory
       extends mjs.core.database.fielddef.impl.runtime.DefaultJAXBContextImpl
{

   private static java.util.HashMap defaultImplementations = new java.util.HashMap(16, 0.75F);
   private static java.util.HashMap rootTagMap = new java.util.HashMap();
   public final static mjs.core.database.fielddef.impl.runtime.GrammarInfo grammarInfo = new mjs.core.database.fielddef.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (mjs.core.database.fielddef.ObjectFactory.class));
   public final static java.lang.Class version = (mjs.core.database.fielddef.impl.JAXBVersion.class);

   static
   {
      defaultImplementations.put((mjs.core.database.fielddef.FieldDefinition.class), "mjs.core.database.fielddef.impl.FieldDefinitionImpl");
      defaultImplementations.put((mjs.core.database.fielddef.Field.class), "mjs.core.database.fielddef.impl.FieldImpl");
      defaultImplementations.put((mjs.core.database.fielddef.FieldDefs.class), "mjs.core.database.fielddef.impl.FieldDefsImpl");
      defaultImplementations.put((mjs.core.database.fielddef.FieldDefinitionList.class), "mjs.core.database.fielddef.impl.FieldDefinitionListImpl");
      rootTagMap.put(new javax.xml.namespace.QName("http://www.accenture.com/core/model/fielddef", "fieldDefs"), (mjs.core.database.fielddef.FieldDefs.class));
      rootTagMap.put(new javax.xml.namespace.QName("http://www.accenture.com/core/model/fielddef", "field"), (mjs.core.database.fielddef.Field.class));
   }

   /**
    * Create a new ObjectFactory that can be used to create new
    * instances of schema derived classes for package:
    * mjs.core.database.fielddef
    */
   public ObjectFactory()
   {
      super(grammarInfo);
   }

   /**
    * Create an instance of the specified Java content interface.
    *
    * @param javaContentInterface              the Class object of the
    * javacontent interface to instantiate
    * @return                                  a new instance
    * @exception javax.xml.bind.JAXBException  Description of
    * Exception
    * @throws JAXBException                    if an error occurs
    */
   public java.lang.Object newInstance(java.lang.Class javaContentInterface)
          throws javax.xml.bind.JAXBException
   {
      return super.newInstance(javaContentInterface);
   }

   /**
    * Get the specified property. This method can only be used to get
    * provider specific properties. Attempting to get an undefined
    * property will result in a PropertyException being thrown.
    *
    * @param name                                  the name of the
    * property to retrieve
    * @return                                      the value of the
    * requested property
    * @exception javax.xml.bind.PropertyException  Description of
    * Exception
    * @throws PropertyException                    when there is an
    * error retrieving the given property or value
    */
   public java.lang.Object getProperty(java.lang.String name)
          throws javax.xml.bind.PropertyException
   {
      return super.getProperty(name);
   }

   /**
    * Set the specified property. This method can only be used to set
    * provider specific properties. Attempting to set an undefined
    * property will result in a PropertyException being thrown.
    *
    * @param name                                  the name of the
    * property to retrieve
    * @param value                                 the value of the
    * property to be set
    * @exception javax.xml.bind.PropertyException  Description of
    * Exception
    * @throws PropertyException                    when there is an
    * error processing the given property or value
    */
   public void setProperty(java.lang.String name, java.lang.Object value)
          throws javax.xml.bind.PropertyException
   {
      super.setProperty(name, value);
   }

   /**
    * Create an instance of FieldDefinition
    *
    * @return                                  Description of Return
    * Value
    * @exception javax.xml.bind.JAXBException  Description of
    * Exception
    * @throws JAXBException                    if an error occurs
    */
   public mjs.core.database.fielddef.FieldDefinition createFieldDefinition()
          throws javax.xml.bind.JAXBException
   {
      return new mjs.core.database.fielddef.impl.FieldDefinitionImpl();
   }

   /**
    * Create an instance of Field
    *
    * @return                                  Description of Return
    * Value
    * @exception javax.xml.bind.JAXBException  Description of
    * Exception
    * @throws JAXBException                    if an error occurs
    */
   public mjs.core.database.fielddef.Field createField()
          throws javax.xml.bind.JAXBException
   {
      return new mjs.core.database.fielddef.impl.FieldImpl();
   }

   /**
    * Create an instance of FieldDefs
    *
    * @return                                  Description of Return
    * Value
    * @exception javax.xml.bind.JAXBException  Description of
    * Exception
    * @throws JAXBException                    if an error occurs
    */
   public mjs.core.database.fielddef.FieldDefs createFieldDefs()
          throws javax.xml.bind.JAXBException
   {
      return new mjs.core.database.fielddef.impl.FieldDefsImpl();
   }

   /**
    * Create an instance of FieldDefinitionList
    *
    * @return                                  Description of Return
    * Value
    * @exception javax.xml.bind.JAXBException  Description of
    * Exception
    * @throws JAXBException                    if an error occurs
    */
   public mjs.core.database.fielddef.FieldDefinitionList createFieldDefinitionList()
          throws javax.xml.bind.JAXBException
   {
      return new mjs.core.database.fielddef.impl.FieldDefinitionListImpl();
   }

}
