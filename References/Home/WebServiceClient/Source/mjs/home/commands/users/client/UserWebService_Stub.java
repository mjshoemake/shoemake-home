// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package mjs.home.commands.users.client;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class UserWebService_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements mjs.home.commands.users.client.UserWebService {
    
    
    /*
     *  public constructor
     */
    public UserWebService_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://localhost:8080/shoemake/UserService");
    }
    
    
    /*
     *  implementation of addUser
     */
    public void addUser(mjs.home.commands.users.client.AddUser parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(addUser_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_addUser_addUser_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myAddUser_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteUser
     */
    public void deleteUser(mjs.home.commands.users.client.DeleteUser parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteUser_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteUser_deleteUser_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myDeleteUser_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of updateUser2
     */
    public void updateUser2(mjs.home.commands.users.client.UpdateUser2 parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(updateUser2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_updateUser2_updateUser2_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myUpdateUser2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getUserList
     */
    public mjs.home.commands.users.client.GetUserListResponse getUserList(mjs.home.commands.users.client.GetUserList parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getUserList_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getUserList_getUserList_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myGetUserList_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            mjs.home.commands.users.client.GetUserListResponse _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (mjs.home.commands.users.client.GetUserListResponse)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (mjs.home.commands.users.client.GetUserListResponse)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getUser2
     */
    public mjs.home.commands.users.client.GetUser2Response getUser2(mjs.home.commands.users.client.GetUser2 parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getUser2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getUser2_getUser2_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myGetUser2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            mjs.home.commands.users.client.GetUser2Response _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (mjs.home.commands.users.client.GetUser2Response)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (mjs.home.commands.users.client.GetUser2Response)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of updateUser
     */
    public void updateUser(mjs.home.commands.users.client.UpdateUser parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(updateUser_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_updateUser_updateUser_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myUpdateUser_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteUser2
     */
    public void deleteUser2(mjs.home.commands.users.client.DeleteUser2 parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteUser2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteUser2_deleteUser2_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myDeleteUser2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getUser
     */
    public mjs.home.commands.users.client.GetUserResponse getUser(mjs.home.commands.users.client.GetUser parameters)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getUser_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getUser_getUser_QNAME);
            _bodyBlock.setValue(parameters);
            _bodyBlock.setSerializer(ns1_myGetUser_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            mjs.home.commands.users.client.GetUserResponse _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (mjs.home.commands.users.client.GetUserResponse)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (mjs.home.commands.users.client.GetUserResponse)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case addUser_OPCODE:
                _deserialize_addUser(bodyReader, deserializationContext, state);
                break;
            case deleteUser_OPCODE:
                _deserialize_deleteUser(bodyReader, deserializationContext, state);
                break;
            case updateUser2_OPCODE:
                _deserialize_updateUser2(bodyReader, deserializationContext, state);
                break;
            case getUserList_OPCODE:
                _deserialize_getUserList(bodyReader, deserializationContext, state);
                break;
            case getUser2_OPCODE:
                _deserialize_getUser2(bodyReader, deserializationContext, state);
                break;
            case updateUser_OPCODE:
                _deserialize_updateUser(bodyReader, deserializationContext, state);
                break;
            case deleteUser2_OPCODE:
                _deserialize_deleteUser2(bodyReader, deserializationContext, state);
                break;
            case getUser_OPCODE:
                _deserialize_getUser(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void _handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
    }
    
    
    
    /*
     * This method deserializes the body of the addUser operation.
     */
    private void _deserialize_addUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteUser operation.
     */
    private void _deserialize_deleteUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateUser2 operation.
     */
    private void _deserialize_updateUser2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUserList operation.
     */
    private void _deserialize_getUserList(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myGetUserListResponseObj =
            ns1_myGetUserListResponse_LiteralSerializer.deserialize(ns1_getUserList_getUserListResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUserList_getUserListResponse_QNAME);
        bodyBlock.setValue(myGetUserListResponseObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUser2 operation.
     */
    private void _deserialize_getUser2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myGetUser2ResponseObj =
            ns1_myGetUser2Response_LiteralSerializer.deserialize(ns1_getUser2_getUser2Response_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUser2_getUser2Response_QNAME);
        bodyBlock.setValue(myGetUser2ResponseObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateUser operation.
     */
    private void _deserialize_updateUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteUser2 operation.
     */
    private void _deserialize_deleteUser2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUser operation.
     */
    private void _deserialize_getUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myGetUserResponseObj =
            ns1_myGetUserResponse_LiteralSerializer.deserialize(ns1_getUser_getUserResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUser_getUserResponse_QNAME);
        bodyBlock.setValue(myGetUserResponseObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myUpdateUser2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.UpdateUser2.class, ns1_updateUser2_TYPE_QNAME);
        ns1_myAddUser_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.AddUser.class, ns1_addUser_TYPE_QNAME);
        ns1_myGetUser_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.GetUser.class, ns1_getUser_TYPE_QNAME);
        ns1_myGetUserListResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.GetUserListResponse.class, ns1_getUserListResponse_TYPE_QNAME);
        ns1_myDeleteUser2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.DeleteUser2.class, ns1_deleteUser2_TYPE_QNAME);
        ns1_myGetUser2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.GetUser2.class, ns1_getUser2_TYPE_QNAME);
        ns1_myGetUserResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.GetUserResponse.class, ns1_getUserResponse_TYPE_QNAME);
        ns1_myGetUserList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.GetUserList.class, ns1_getUserList_TYPE_QNAME);
        ns1_myUpdateUser_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.UpdateUser.class, ns1_updateUser_TYPE_QNAME);
        ns1_myGetUser2Response_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.GetUser2Response.class, ns1_getUser2Response_TYPE_QNAME);
        ns1_myDeleteUser_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.client.DeleteUser.class, ns1_deleteUser_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("http://www.shoemake.com/wsdl/UserService", "UserWebServicePort");
    private static final int addUser_OPCODE = 0;
    private static final int deleteUser_OPCODE = 1;
    private static final int updateUser2_OPCODE = 2;
    private static final int getUserList_OPCODE = 3;
    private static final int getUser2_OPCODE = 4;
    private static final int updateUser_OPCODE = 5;
    private static final int deleteUser2_OPCODE = 6;
    private static final int getUser_OPCODE = 7;
    private static final QName ns1_addUser_addUser_QNAME = new QName("http://www.shoemake.com/types", "addUser");
    private static final QName ns1_addUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "addUser");
    private CombinedSerializer ns1_myAddUser_LiteralSerializer;
    private static final QName ns1_deleteUser_deleteUser_QNAME = new QName("http://www.shoemake.com/types", "deleteUser");
    private static final QName ns1_deleteUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "deleteUser");
    private CombinedSerializer ns1_myDeleteUser_LiteralSerializer;
    private static final QName ns1_updateUser2_updateUser2_QNAME = new QName("http://www.shoemake.com/types", "updateUser2");
    private static final QName ns1_updateUser2_TYPE_QNAME = new QName("http://www.shoemake.com/types", "updateUser2");
    private CombinedSerializer ns1_myUpdateUser2_LiteralSerializer;
    private static final QName ns1_getUserList_getUserList_QNAME = new QName("http://www.shoemake.com/types", "getUserList");
    private static final QName ns1_getUserList_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUserList");
    private CombinedSerializer ns1_myGetUserList_LiteralSerializer;
    private static final QName ns1_getUserList_getUserListResponse_QNAME = new QName("http://www.shoemake.com/types", "getUserListResponse");
    private static final QName ns1_getUserListResponse_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUserListResponse");
    private CombinedSerializer ns1_myGetUserListResponse_LiteralSerializer;
    private static final QName ns1_getUser2_getUser2_QNAME = new QName("http://www.shoemake.com/types", "getUser2");
    private static final QName ns1_getUser2_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUser2");
    private CombinedSerializer ns1_myGetUser2_LiteralSerializer;
    private static final QName ns1_getUser2_getUser2Response_QNAME = new QName("http://www.shoemake.com/types", "getUser2Response");
    private static final QName ns1_getUser2Response_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUser2Response");
    private CombinedSerializer ns1_myGetUser2Response_LiteralSerializer;
    private static final QName ns1_updateUser_updateUser_QNAME = new QName("http://www.shoemake.com/types", "updateUser");
    private static final QName ns1_updateUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "updateUser");
    private CombinedSerializer ns1_myUpdateUser_LiteralSerializer;
    private static final QName ns1_deleteUser2_deleteUser2_QNAME = new QName("http://www.shoemake.com/types", "deleteUser2");
    private static final QName ns1_deleteUser2_TYPE_QNAME = new QName("http://www.shoemake.com/types", "deleteUser2");
    private CombinedSerializer ns1_myDeleteUser2_LiteralSerializer;
    private static final QName ns1_getUser_getUser_QNAME = new QName("http://www.shoemake.com/types", "getUser");
    private static final QName ns1_getUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUser");
    private CombinedSerializer ns1_myGetUser_LiteralSerializer;
    private static final QName ns1_getUser_getUserResponse_QNAME = new QName("http://www.shoemake.com/types", "getUserResponse");
    private static final QName ns1_getUserResponse_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUserResponse");
    private CombinedSerializer ns1_myGetUserResponse_LiteralSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://www.shoemake.com/types"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
