// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package mjs.home.commands.users;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;
import javax.xml.rpc.handler.HandlerInfo;
import com.sun.xml.rpc.client.HandlerChainImpl;

public class UserWebService_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    public UserWebService_Tie() throws Exception {
        super(new mjs.home.commands.users.bindings.UserService_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: deleteUser
     */
    private void invoke_deleteUser(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_deleteUser_RequestStruct myUserWebService_deleteUser_RequestStruct = null;
        Object myUserWebService_deleteUser_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_deleteUser_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_deleteUser_RequestStruct = (mjs.home.commands.users.UserWebService_deleteUser_RequestStruct)((SOAPDeserializationState)myUserWebService_deleteUser_RequestStructObj).getInstance();
        } else {
            myUserWebService_deleteUser_RequestStruct = (mjs.home.commands.users.UserWebService_deleteUser_RequestStruct)myUserWebService_deleteUser_RequestStructObj;
        }
        
        try {
            ((mjs.home.commands.users.UserWebService) getTarget()).deleteUser(myUserWebService_deleteUser_RequestStruct.getInt_1());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: updateUser
     */
    private void invoke_updateUser(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_updateUser_RequestStruct myUserWebService_updateUser_RequestStruct = null;
        Object myUserWebService_updateUser_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_updateUser_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_updateUser_RequestStruct = (mjs.home.commands.users.UserWebService_updateUser_RequestStruct)((SOAPDeserializationState)myUserWebService_updateUser_RequestStructObj).getInstance();
        } else {
            myUserWebService_updateUser_RequestStruct = (mjs.home.commands.users.UserWebService_updateUser_RequestStruct)myUserWebService_updateUser_RequestStructObj;
        }
        
        try {
            ((mjs.home.commands.users.UserWebService) getTarget()).updateUser(myUserWebService_updateUser_RequestStruct.getInt_1(), myUserWebService_updateUser_RequestStruct.getUser_2());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: deleteUser2
     */
    private void invoke_deleteUser2(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_deleteUser2_RequestStruct myUserWebService_deleteUser2_RequestStruct = null;
        Object myUserWebService_deleteUser2_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_deleteUser2_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_deleteUser2_RequestStruct = (mjs.home.commands.users.UserWebService_deleteUser2_RequestStruct)((SOAPDeserializationState)myUserWebService_deleteUser2_RequestStructObj).getInstance();
        } else {
            myUserWebService_deleteUser2_RequestStruct = (mjs.home.commands.users.UserWebService_deleteUser2_RequestStruct)myUserWebService_deleteUser2_RequestStructObj;
        }
        
        try {
            ((mjs.home.commands.users.UserWebService) getTarget()).deleteUser(myUserWebService_deleteUser2_RequestStruct.getString_1());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getUser
     */
    private void invoke_getUser(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_getUser_RequestStruct myUserWebService_getUser_RequestStruct = null;
        Object myUserWebService_getUser_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_getUser_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_getUser_RequestStruct = (mjs.home.commands.users.UserWebService_getUser_RequestStruct)((SOAPDeserializationState)myUserWebService_getUser_RequestStructObj).getInstance();
        } else {
            myUserWebService_getUser_RequestStruct = (mjs.home.commands.users.UserWebService_getUser_RequestStruct)myUserWebService_getUser_RequestStructObj;
        }
        
        try {
            mjs.home.model.User _result = ((mjs.home.commands.users.UserWebService) getTarget()).getUser(myUserWebService_getUser_RequestStruct.getInt_1());
            
            SOAPHeaderBlockInfo headerInfo;
            
            mjs.home.commands.users.UserWebService_getUser_ResponseStruct _response = new mjs.home.commands.users.UserWebService_getUser_ResponseStruct();
            _response.setResult(_result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUser_getUserResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myUserWebService_getUser_ResponseStruct__UserService__LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getUser2
     */
    private void invoke_getUser2(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_getUser2_RequestStruct myUserWebService_getUser2_RequestStruct = null;
        Object myUserWebService_getUser2_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_getUser2_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_getUser2_RequestStruct = (mjs.home.commands.users.UserWebService_getUser2_RequestStruct)((SOAPDeserializationState)myUserWebService_getUser2_RequestStructObj).getInstance();
        } else {
            myUserWebService_getUser2_RequestStruct = (mjs.home.commands.users.UserWebService_getUser2_RequestStruct)myUserWebService_getUser2_RequestStructObj;
        }
        
        try {
            mjs.home.model.User _result = ((mjs.home.commands.users.UserWebService) getTarget()).getUser(myUserWebService_getUser2_RequestStruct.getString_1());
            
            SOAPHeaderBlockInfo headerInfo;
            
            mjs.home.commands.users.UserWebService_getUser_ResponseStruct1 _response = new mjs.home.commands.users.UserWebService_getUser_ResponseStruct1();
            _response.setResult(_result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUser2_getUser2Response_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myUserWebService_getUser_ResponseStruct1__UserService__LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: getUserList
     */
    private void invoke_getUserList(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_getUserList_RequestStruct myUserWebService_getUserList_RequestStruct = null;
        Object myUserWebService_getUserList_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_getUserList_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_getUserList_RequestStruct = (mjs.home.commands.users.UserWebService_getUserList_RequestStruct)((SOAPDeserializationState)myUserWebService_getUserList_RequestStructObj).getInstance();
        } else {
            myUserWebService_getUserList_RequestStruct = (mjs.home.commands.users.UserWebService_getUserList_RequestStruct)myUserWebService_getUserList_RequestStructObj;
        }
        
        try {
            mjs.home.model.User[] _result = ((mjs.home.commands.users.UserWebService) getTarget()).getUserList();
            
            SOAPHeaderBlockInfo headerInfo;
            
            mjs.home.commands.users.UserWebService_getUserList_ResponseStruct _response = new mjs.home.commands.users.UserWebService_getUserList_ResponseStruct();
            _response.setResult(_result);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUserList_getUserListResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myUserWebService_getUserList_ResponseStruct__UserService__LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: addUser
     */
    private void invoke_addUser(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_addUser_RequestStruct myUserWebService_addUser_RequestStruct = null;
        Object myUserWebService_addUser_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_addUser_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_addUser_RequestStruct = (mjs.home.commands.users.UserWebService_addUser_RequestStruct)((SOAPDeserializationState)myUserWebService_addUser_RequestStructObj).getInstance();
        } else {
            myUserWebService_addUser_RequestStruct = (mjs.home.commands.users.UserWebService_addUser_RequestStruct)myUserWebService_addUser_RequestStructObj;
        }
        
        try {
            ((mjs.home.commands.users.UserWebService) getTarget()).addUser(myUserWebService_addUser_RequestStruct.getUser_1());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: updateUser2
     */
    private void invoke_updateUser2(StreamingHandlerState state) throws Exception {
        
        mjs.home.commands.users.UserWebService_updateUser2_RequestStruct myUserWebService_updateUser2_RequestStruct = null;
        Object myUserWebService_updateUser2_RequestStructObj =
            state.getRequest().getBody().getValue();
        
        if (myUserWebService_updateUser2_RequestStructObj instanceof SOAPDeserializationState) {
            myUserWebService_updateUser2_RequestStruct = (mjs.home.commands.users.UserWebService_updateUser2_RequestStruct)((SOAPDeserializationState)myUserWebService_updateUser2_RequestStructObj).getInstance();
        } else {
            myUserWebService_updateUser2_RequestStruct = (mjs.home.commands.users.UserWebService_updateUser2_RequestStruct)myUserWebService_updateUser2_RequestStructObj;
        }
        
        try {
            ((mjs.home.commands.users.UserWebService) getTarget()).updateUser(myUserWebService_updateUser2_RequestStruct.getString_1(), myUserWebService_updateUser2_RequestStruct.getUser_2());
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_deleteUser_deleteUser_QNAME)) {
            state.getRequest().setOperationCode(deleteUser_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_updateUser_updateUser_QNAME)) {
            state.getRequest().setOperationCode(updateUser_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_deleteUser2_deleteUser2_QNAME)) {
            state.getRequest().setOperationCode(deleteUser2_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getUser_getUser_QNAME)) {
            state.getRequest().setOperationCode(getUser_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getUser2_getUser2_QNAME)) {
            state.getRequest().setOperationCode(getUser2_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_getUserList_getUserList_QNAME)) {
            state.getRequest().setOperationCode(getUserList_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_addUser_addUser_QNAME)) {
            state.getRequest().setOperationCode(addUser_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_updateUser2_updateUser2_QNAME)) {
            state.getRequest().setOperationCode(updateUser2_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case deleteUser_OPCODE:
                deserialize_deleteUser(bodyReader, deserializationContext, state);
                break;
            case updateUser_OPCODE:
                deserialize_updateUser(bodyReader, deserializationContext, state);
                break;
            case deleteUser2_OPCODE:
                deserialize_deleteUser2(bodyReader, deserializationContext, state);
                break;
            case getUser_OPCODE:
                deserialize_getUser(bodyReader, deserializationContext, state);
                break;
            case getUser2_OPCODE:
                deserialize_getUser2(bodyReader, deserializationContext, state);
                break;
            case getUserList_OPCODE:
                deserialize_getUserList(bodyReader, deserializationContext, state);
                break;
            case addUser_OPCODE:
                deserialize_addUser(bodyReader, deserializationContext, state);
                break;
            case updateUser2_OPCODE:
                deserialize_updateUser2(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(opcode));
        }
    }
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        state.getRequest().setOperationCode(updateUser2_OPCODE);
    }
    
    
    
    /*
     * This method deserializes the body of the deleteUser operation.
     */
    private void deserialize_deleteUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_deleteUser_RequestStructObj =
            ns1_myUserWebService_deleteUser_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_deleteUser_deleteUser_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteUser_deleteUser_QNAME);
        bodyBlock.setValue(myUserWebService_deleteUser_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateUser operation.
     */
    private void deserialize_updateUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_updateUser_RequestStructObj =
            ns1_myUserWebService_updateUser_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_updateUser_updateUser_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_updateUser_updateUser_QNAME);
        bodyBlock.setValue(myUserWebService_updateUser_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteUser2 operation.
     */
    private void deserialize_deleteUser2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_deleteUser2_RequestStructObj =
            ns1_myUserWebService_deleteUser2_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_deleteUser2_deleteUser2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteUser2_deleteUser2_QNAME);
        bodyBlock.setValue(myUserWebService_deleteUser2_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUser operation.
     */
    private void deserialize_getUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_getUser_RequestStructObj =
            ns1_myUserWebService_getUser_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_getUser_getUser_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUser_getUser_QNAME);
        bodyBlock.setValue(myUserWebService_getUser_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUser2 operation.
     */
    private void deserialize_getUser2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_getUser2_RequestStructObj =
            ns1_myUserWebService_getUser2_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_getUser2_getUser2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUser2_getUser2_QNAME);
        bodyBlock.setValue(myUserWebService_getUser2_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUserList operation.
     */
    private void deserialize_getUserList(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_getUserList_RequestStructObj =
            ns1_myUserWebService_getUserList_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_getUserList_getUserList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUserList_getUserList_QNAME);
        bodyBlock.setValue(myUserWebService_getUserList_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the addUser operation.
     */
    private void deserialize_addUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_addUser_RequestStructObj =
            ns1_myUserWebService_addUser_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_addUser_addUser_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_addUser_addUser_QNAME);
        bodyBlock.setValue(myUserWebService_addUser_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateUser2 operation.
     */
    private void deserialize_updateUser2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myUserWebService_updateUser2_RequestStructObj =
            ns1_myUserWebService_updateUser2_RequestStruct__UserService__LiteralSerializer.deserialize(ns1_updateUser2_updateUser2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_updateUser2_updateUser2_QNAME);
        bodyBlock.setValue(myUserWebService_updateUser2_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case deleteUser_OPCODE:
                invoke_deleteUser(state);
                break;
            case updateUser_OPCODE:
                invoke_updateUser(state);
                break;
            case deleteUser2_OPCODE:
                invoke_deleteUser2(state);
                break;
            case getUser_OPCODE:
                invoke_getUser(state);
                break;
            case getUser2_OPCODE:
                invoke_getUser2(state);
                break;
            case getUserList_OPCODE:
                invoke_getUserList(state);
                break;
            case addUser_OPCODE:
                invoke_addUser(state);
                break;
            case updateUser2_OPCODE:
                invoke_updateUser2(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    protected String getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_deleteUser_deleteUser_QNAME)) {
            return deleteUser_OPCODE;
        }
        if (name.equals(ns1_updateUser_updateUser_QNAME)) {
            return updateUser_OPCODE;
        }
        if (name.equals(ns1_deleteUser2_deleteUser2_QNAME)) {
            return deleteUser2_OPCODE;
        }
        if (name.equals(ns1_getUser_getUser_QNAME)) {
            return getUser_OPCODE;
        }
        if (name.equals(ns1_getUser2_getUser2_QNAME)) {
            return getUser2_OPCODE;
        }
        if (name.equals(ns1_getUserList_getUserList_QNAME)) {
            return getUserList_OPCODE;
        }
        if (name.equals(ns1_addUser_addUser_QNAME)) {
            return addUser_OPCODE;
        }
        if (name.equals(ns1_updateUser2_updateUser2_QNAME)) {
            return updateUser2_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case deleteUser_OPCODE:
                {
                    Class[] carray = { Integer.TYPE };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("deleteUser", carray);
                }
                break;
            
            case updateUser_OPCODE:
                {
                    Class[] carray = { Integer.TYPE,mjs.home.model.User.class };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("updateUser", carray);
                }
                break;
            
            case deleteUser2_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("deleteUser", carray);
                }
                break;
            
            case getUser_OPCODE:
                {
                    Class[] carray = { Integer.TYPE };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("getUser", carray);
                }
                break;
            
            case getUser2_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("getUser", carray);
                }
                break;
            
            case getUserList_OPCODE:
                {
                    Class[] carray = {  };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("getUserList", carray);
                }
                break;
            
            case addUser_OPCODE:
                {
                    Class[] carray = { mjs.home.model.User.class };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("addUser", carray);
                }
                break;
            
            case updateUser2_OPCODE:
                {
                    Class[] carray = { java.lang.String.class,mjs.home.model.User.class };
                    theMethod = (mjs.home.commands.users.UserWebService.class).getMethod("updateUser", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[8];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 8 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myUserWebService_getUser_ResponseStruct1__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_getUser_ResponseStruct1.class, ns1_getUser2Response_TYPE_QNAME);
        ns1_myUserWebService_getUser2_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_getUser2_RequestStruct.class, ns1_getUser2_TYPE_QNAME);
        ns1_myUserWebService_getUser_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_getUser_RequestStruct.class, ns1_getUser_TYPE_QNAME);
        ns1_myUserWebService_updateUser2_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_updateUser2_RequestStruct.class, ns1_updateUser2_TYPE_QNAME);
        ns1_myUserWebService_getUserList_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_getUserList_RequestStruct.class, ns1_getUserList_TYPE_QNAME);
        ns1_myUserWebService_updateUser_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_updateUser_RequestStruct.class, ns1_updateUser_TYPE_QNAME);
        ns1_myUserWebService_deleteUser_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_deleteUser_RequestStruct.class, ns1_deleteUser_TYPE_QNAME);
        ns1_myUserWebService_getUser_ResponseStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_getUser_ResponseStruct.class, ns1_getUserResponse_TYPE_QNAME);
        ns1_myUserWebService_addUser_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_addUser_RequestStruct.class, ns1_addUser_TYPE_QNAME);
        ns1_myUserWebService_getUserList_ResponseStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_getUserList_ResponseStruct.class, ns1_getUserListResponse_TYPE_QNAME);
        ns1_myUserWebService_deleteUser2_RequestStruct__UserService__LiteralSerializer = (CombinedSerializer)registry.getSerializer("", mjs.home.commands.users.UserWebService_deleteUser2_RequestStruct.class, ns1_deleteUser2_TYPE_QNAME);
    }
    
    private static final QName portName = new QName("http://www.shoemake.com/wsdl/UserService", "UserWebService");
    private static final int deleteUser_OPCODE = 0;
    private static final int updateUser_OPCODE = 1;
    private static final int deleteUser2_OPCODE = 2;
    private static final int getUser_OPCODE = 3;
    private static final int getUser2_OPCODE = 4;
    private static final int getUserList_OPCODE = 5;
    private static final int addUser_OPCODE = 6;
    private static final int updateUser2_OPCODE = 7;
    private static final QName ns1_deleteUser_deleteUser_QNAME = new QName("http://www.shoemake.com/types", "deleteUser");
    private static final QName ns1_deleteUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "deleteUser");
    private CombinedSerializer ns1_myUserWebService_deleteUser_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_updateUser_updateUser_QNAME = new QName("http://www.shoemake.com/types", "updateUser");
    private static final QName ns1_updateUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "updateUser");
    private CombinedSerializer ns1_myUserWebService_updateUser_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_deleteUser2_deleteUser2_QNAME = new QName("http://www.shoemake.com/types", "deleteUser2");
    private static final QName ns1_deleteUser2_TYPE_QNAME = new QName("http://www.shoemake.com/types", "deleteUser2");
    private CombinedSerializer ns1_myUserWebService_deleteUser2_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_getUser_getUser_QNAME = new QName("http://www.shoemake.com/types", "getUser");
    private static final QName ns1_getUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUser");
    private CombinedSerializer ns1_myUserWebService_getUser_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_getUser_getUserResponse_QNAME = new QName("http://www.shoemake.com/types", "getUserResponse");
    private static final QName ns1_getUserResponse_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUserResponse");
    private CombinedSerializer ns1_myUserWebService_getUser_ResponseStruct__UserService__LiteralSerializer;
    private static final QName ns1_getUser2_getUser2_QNAME = new QName("http://www.shoemake.com/types", "getUser2");
    private static final QName ns1_getUser2_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUser2");
    private CombinedSerializer ns1_myUserWebService_getUser2_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_getUser2_getUser2Response_QNAME = new QName("http://www.shoemake.com/types", "getUser2Response");
    private static final QName ns1_getUser2Response_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUser2Response");
    private CombinedSerializer ns1_myUserWebService_getUser_ResponseStruct1__UserService__LiteralSerializer;
    private static final QName ns1_getUserList_getUserList_QNAME = new QName("http://www.shoemake.com/types", "getUserList");
    private static final QName ns1_getUserList_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUserList");
    private CombinedSerializer ns1_myUserWebService_getUserList_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_getUserList_getUserListResponse_QNAME = new QName("http://www.shoemake.com/types", "getUserListResponse");
    private static final QName ns1_getUserListResponse_TYPE_QNAME = new QName("http://www.shoemake.com/types", "getUserListResponse");
    private CombinedSerializer ns1_myUserWebService_getUserList_ResponseStruct__UserService__LiteralSerializer;
    private static final QName ns1_addUser_addUser_QNAME = new QName("http://www.shoemake.com/types", "addUser");
    private static final QName ns1_addUser_TYPE_QNAME = new QName("http://www.shoemake.com/types", "addUser");
    private CombinedSerializer ns1_myUserWebService_addUser_RequestStruct__UserService__LiteralSerializer;
    private static final QName ns1_updateUser2_updateUser2_QNAME = new QName("http://www.shoemake.com/types", "updateUser2");
    private static final QName ns1_updateUser2_TYPE_QNAME = new QName("http://www.shoemake.com/types", "updateUser2");
    private CombinedSerializer ns1_myUserWebService_updateUser2_RequestStruct__UserService__LiteralSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://www.shoemake.com/types"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
